<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on biotope monologue</title>
    <link>https://mijinko17.github.io/hoge/tags/untagged/</link>
    <description>Recent content in untagged on biotope monologue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 09 May 2020 20:05:43 +0900</lastBuildDate>
    
	<atom:link href="https://mijinko17.github.io/hoge/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;erが競プロでRustを使おうとして困ったことたち</title>
      <link>https://mijinko17.github.io/hoge/posts/rust_compro/</link>
      <pubDate>Sat, 09 May 2020 20:05:43 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/rust_compro/</guid>
      <description>備忘録がてら。とりあえずうまくいく書き方を載せます。
ちょこちょこ追加予定。
入出力 何もわかりません。自分は AtCoder の rust の提出から適当に拝借しています。
現在の AtCoder の judge では proconio なるクレートがインクルードされているのでそれを用いると楽かもしれません。
proconio
配列を宣言したい   長さ n、初期値 0 の配列を宣言する
letn: usize =10;letv: Vec&amp;lt;i32&amp;gt;=vec![0;n];長さの指定はusizeである必要があることに注意する。
初期値の型が明らかな場合型指定はいらない。
letn: usize =10;letv=vec![0;n];  usizeとは限らない変数を用いて長さを指定する
letn: i32 =10;letv=vec![0;nasusize];asで型変換できる。
  多次元配列を宣言する
  n×m、初期値 0 の二次元配列を宣言する。
letn: usize =10;letm: usize =18;letv=vec![vec![0;m];n];3 次元でも同様。
  (グラフなどを想定して) 空の配列を n 個持った配列を宣言する
letn: usize =10;// g,h,iどれでもOK letmutg: Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;=vec![vec![];n];letmuth=vec![vec![]asVec&amp;lt;i32&amp;gt;;n];letmuti=vec![vec![0;0];n];空の配列は型がわからないので何らかの形での指定が必要。
    データ構造系 use std::collections::*;すると楽。以下はこれがある前提。
  BTreeMap</description>
    </item>
    
    <item>
      <title>Mujin Programming Challenge 2018 D うほょじご</title>
      <link>https://mijinko17.github.io/hoge/posts/mujin_pc_2018_d/</link>
      <pubDate>Thu, 07 May 2020 10:23:10 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/mujin_pc_2018_d/</guid>
      <description>色々解法を思いついたので書いてみる。
問題
概要 $X:=\{\ 0$以上$1000$未満の整数$\ \}$ とする。
正の整数 $n$、$m&amp;lt;1000$ が与えられる。問題文で定義される $f:X \times X\rightarrow X \times X$ について、次を満たす $(p,q) \in X \times X$ の個数を求めよ。
 $1 \leq p \leq n$, $1 \leq q \leq m$ $(p,q)$ に $f$ を繰り返し施しても第一成分、第二成分いずれも$0$にならない。  解法 1(解説の方法) $f$ を繰り返し施したとき第一成分、第二成分どちらかが 0 になるものを数えてもよい。これを数えるには $X \times X$ の元全体を頂点とするグラフに操作 $f$ から誘導される有向辺を張り、その辺に沿って移動したときにいつか $(0,k)$ か $(k,0)$ になるものを数えればいい。これは $f$ から誘導される辺とは逆向きの辺を張って $(0,k)$ と $(k,0)$ から BFS をすれば調べられる。
実装上は$p$、$q$ いずれかが 0 のとき$f(p,q)=(0,0)$と定義して$(0,0)$から BFS するのが楽。
解法 2 (union-find) $p$、$q$ いずれかが 0 のとき $f(p,q)=(0,0)$ としておく。</description>
    </item>
    
    <item>
      <title>Codeforces Round 619</title>
      <link>https://mijinko17.github.io/hoge/posts/codefo_round_619/</link>
      <pubDate>Fri, 14 Feb 2020 01:33:04 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/codefo_round_619/</guid>
      <description>A a[i]、b[i]どちらかがc[i]と等しければ ok。
B k は-1 と隣接するものの内最大のものと最小のものの中間にするのが最適。
C 均等に分割する。
D 行ごとに頑張ると全ての道を通れる。
E 時間のなさ</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://mijinko17.github.io/hoge/posts/first_post/</link>
      <pubDate>Mon, 20 Jan 2020 03:11:20 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/first_post/</guid>
      <description>このサイトについて   このサイトは mijinko(twitter, atcoder)によって主に競技プログラミング関係の記事を投稿するために作られました。
  コンテスト後によく自分の解法をまとめたツイートをするのですが、この前コンテストに参加できなかった時に他の方の解法ツイートが目障りに感じました(すみませんやたら強い言葉を使ってるのは単純にいい表現が思いつかないだけです……)。コンテスト後の感想戦(?)も競プロの醍醐味ではあるのですが、twitter などの情報の取捨選択をしにくい場所にデカデカと解法を書き連ねるのは少し違うような気がしています。今後は自分の解法はここに投稿するつもりです。
  ページレイアウトは hugo のテンプレートを使って作成し、それを github pages で公開しています。テキストベースのものは極力 github で管理したい思いがあり、それを実現するには github pages が最適だという判断です。ちなみに以前は github pages のリポジトリは公開用とソースコード用で二つ用意したりブランチを不自然に切ったりする必要があったようですが、この記事を書いている現在は以下のように設定することで 1 つのリポジトリで綺麗に完結させることができます。
 github pages の source を master の docs/に指定する。 ./config.toml にpublishDir=&amp;quot;docs&amp;quot;を追加する。これで build 後の生成ファイルが docs/に出力されるようになる。  あと自分がサイトを作る時に悩んだことを書き残しておきます。
 無料アカウントの場合、github pages に使うリポジトリは public である必要があります。 以前は使うリポジトリの名前が固定されていたようですが、現在はどのリポジトリでも pages を使うことができます。    markdown の書き方が分からなすぎて辛いです。今日は結局リンクを別のタブで開くようにできませんでした。あと tex の表示もできるようにしたいですね。
  このページテーマは Hermit という名前で、スタイリッシュで気に入っているのですが、ページの遷移が悪い感があります。一つの記事から他のページへの移動がとても面倒です(一度記事一覧に戻る必要があります)。テーマは気軽に変えられそうなのでもう少し使い勝手のいいものを探していきます。
  </description>
    </item>
    
  </channel>
</rss>