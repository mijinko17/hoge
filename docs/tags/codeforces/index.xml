<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codeforces on biotope monologue</title>
    <link>https://mijinko17.github.io/hoge/tags/codeforces/</link>
    <description>Recent content in Codeforces on biotope monologue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 23 Jan 2020 02:58:44 +0900</lastBuildDate>
    
	<atom:link href="https://mijinko17.github.io/hoge/tags/codeforces/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Codeforces Round #615</title>
      <link>https://mijinko17.github.io/hoge/posts/codefo_round_615/</link>
      <pubDate>Thu, 23 Jan 2020 02:58:44 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/codefo_round_615/</guid>
      <description>A 一旦最大のものに合わせる。残ったコインが 3 の倍数なら YES。
B ソートして前から見る。次の目的地が右上になかったら NO
C 素因数が一つの時は指数が 6 以上で OK。2 つ以上の時は適当に素因数 2 つとって a、b に割り当てて c=n/(a*b)とする。
D x で割った余りで分類して、各余りごとに前から詰めるのが最適。各余りについて作られない最小の数を計算して、それらの最小値を計算すれば良い。セグ木でぶん殴って終わり。
E 各列で考える。各回転数についてどのくらい目的の状態と一致するか分かればいい。各$a_{ij}$について何回転すれば最適な位置に移動できるかはすぐわかることを利用すれば$O(n)$で計算できる。ランタイムエラーで通らなくて切れる。
F 無証明だが多分木の直径の両端とあと一つ最適なやつを取ればいい。三つ目をとるときに LCA でぶん殴る。</description>
    </item>
    
  </channel>
</rss>