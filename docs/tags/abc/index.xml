<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ABC on biotope monologue</title>
    <link>https://mijinko17.github.io/hoge/tags/abc/</link>
    <description>Recent content in ABC on biotope monologue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 09 Feb 2020 22:39:01 +0900</lastBuildDate>
    
	<atom:link href="https://mijinko17.github.io/hoge/tags/abc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ABC154</title>
      <link>https://mijinko17.github.io/hoge/posts/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:39:01 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc154/</guid>
      <description>A はい
B string(s.size(),&#39;x&#39;)
C unordered_map で数え上げ
D 累積和
E 桁 dp。桁 dp の書き方に慣れてなくて苦戦
F 何もできなかった&amp;hellip; 結局答えは$f(r_1-1,k)$とか$f(l,c_1-1)$とかの線形和なのであとは係数を決めればいいがどうやればいいか分からなかった。</description>
    </item>
    
    <item>
      <title>ABC153</title>
      <link>https://mijinko17.github.io/hoge/posts/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:13:03 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc153/</guid>
      <description>ペナ込み 74 分全完でした。 典型の E で時間溶かしたの良くなかった……
問題: atcoder.jp/contests/abc153/tasks
成績: atcoder.jp/users/mijinko/history/share/abc153
Summary A 繰り上げの割り算でスッキリ書きます。
B 必殺技全部使って倒せれば十分。
C 強いモンスターを必殺技で殴って残ったやつを攻撃。
D $f(n):=$(体力$n$のやつを倒すための攻撃数)を dfs
E ダメージ合計を頂点とするグラフを作ってダイクストラで撲殺。そんなことせずともナップザックすればいいっぽいのだが何回でも同じ魔法を使えるところで頭がいかれてしまった。
F 生き残ってる最も左のモンスターを擦るように攻撃するのが最適。使った爆弾がどこまで影響するかをいもす法的に管理して左から見る。
 Details E 考えたのは
 ナップザック グラフを作ってダイクストラ  です。
問題文からしてナップザックを考えるのは当然なのですが、同じ魔法を何度も使える点が The ナップザック的な問題と少し違います。問題が簡単なのは気づきましたがそのせいで焦ってしまい冷静な思考を失ってしまいました。
たまたまこの手の問題をダイクストラで殴り殺した経験があり、その方向で考え直したらうまくいきました。
ダイクストラで解いた人が少ないようなので一応解法を簡単に書くと、ダメージ合計を頂点とするグラフを作り、$i$ から $i+A_j$ にコスト $B_j$ の有向辺を貼ります。このグラフで 0 を始点とするダイクストラをして $h$ までの距離を出力すればいいです。この解法はむしろ同じ魔法を何度も使用できるからこそ使える方法ですね。
提出したコードを貼っておきます。オーバーキル感はありますが、やること自体はシンプルで自分は好きです。
atcoder.jp/contests/abc153/submissions/9756498
あと実験としてここにも貼ります。
Eのソースコード #include &amp;lt;bits/stdc++.h&amp;gt;typedef long long lint; using namespace std; //ただの辺 struct edge { using lint = long long int; int to; lint cost; //引数一つの時は距離1  edge(int t, lint c = 1) : to(t), cost(c) { } }; lint h, n; vector&amp;lt;lint&amp;gt; a, b; // dijkstra // depend:edge vector&amp;lt;long long int&amp;gt; dijkstra(vector&amp;lt;vector&amp;lt;edge&amp;gt;&amp;gt;&amp;amp; g, int start) { using lint = long long int; vector&amp;lt;lint&amp;gt; res(g.</description>
    </item>
    
    <item>
      <title>ABC152</title>
      <link>https://mijinko17.github.io/hoge/posts/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 06:55:14 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc152/</guid>
      <description>94 分 A~E の 5 完でした。
D に 50 分くらい吸われて死にかけましたが何とか E まで解けました。毎度 C、D あたりで引っかかってる気がします。
問題: https://atcoder.jp/contests/abc152/tasks
成績: https://atcoder.jp/users/mijinko/history/share/abc152
A N==Mかを判定すればいいです。
B  string(n,c)で char c を n 個くっつけたものを生成できるので文字列の生成はすぐです。 string に対して不等号を使えば辞書順の判定はできるのでこれで終わりです。  C  「前にある数が全て自分より大きい」ような数の個数を数えればいいです。 これは「前にある数の最小値が自分より大きい」ような数と言い換えられます。 先頭から順に見ていく場合、前にある数の集合は 1 つずつ増えていきます。これに合わせて min を更新していけばいいです。  D  「n 以下の整数で〜」かつ桁に関する情報と来たら桁 dp。当然ですね。 桁 dp あんま書いたことなくて何も分からない…… 桁 dp でググったりしたけど結局どう dp をするのか分からないまま時間が流れます。 とりあえず問題文を読んで求めたいものを整理します。先頭が i、最後尾が j なる数の総数が分かれば良さそうです。これをcount[i][j]という形で持つことにします。 各(i,j)について高速に count を計算できそうです。i が n の最高位より小さかったら〜、等しい時は j が n の一の位より大きかったら〜…… そんな複雑なコードでバグらないわけがありません(破滅)。この時点で 50 分が経過し 3 完を覚悟します。 ここで 1〜n まで全部見て count を完成させる方法が降って来ます。危なかった。整数 k の最高位と最下位はs=to_string(k)としてs[0]、s.</description>
    </item>
    
  </channel>
</rss>