<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>biotope monologue</title>
    <link>https://mijinko17.github.io/hoge/</link>
    <description>Recent content on biotope monologue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 07 May 2020 10:23:10 +0900</lastBuildDate>
    
	<atom:link href="https://mijinko17.github.io/hoge/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mujin Programming Challenge 2018 D うほょじご</title>
      <link>https://mijinko17.github.io/hoge/posts/mujin_pc_2018_d/</link>
      <pubDate>Thu, 07 May 2020 10:23:10 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/mujin_pc_2018_d/</guid>
      <description>色々解法を思いついたので書いてみる。
問題
概要 $X:=\{\ 0$以上$1000$未満の整数$\ \}$ とする。
正の整数 $n$、$m&amp;lt;1000$ が与えられる。問題文で定義される $f:X \times X\rightarrow X \times X$ について、次を満たす $(p,q) \in X \times X$ の個数を求めよ。
 $1 \leq p \leq n$, $1 \leq q \leq m$ $(p,q)$ に $f$ を繰り返し施しても第一成分、第二成分いずれも$0$にならない。  解法 1(解説の方法) $f$ を繰り返し施したとき第一成分、第二成分どちらかが 0 になるものを数えてもよい。これを数えるには $X \times X$ の元全体を頂点とするグラフに操作 $f$ から誘導される有向辺を張り、その辺に沿って移動したときにいつか $(0,k)$ か $(k,0)$ になるものを数えればいい。これは $f$ から誘導される辺とは逆向きの辺を張って $(0,k)$ と $(k,0)$ から BFS をすれば調べられる。
実装上は$p$、$q$ いずれかが 0 のとき$f(p,q)=(0,0)$と定義して$(0,0)$から BFS するのが楽。
解法 2 (union-find) $p$、$q$ いずれかが 0 のとき $f(p,q)=(0,0)$ としておく。</description>
    </item>
    
    <item>
      <title>AtCoder青になったのでイキる</title>
      <link>https://mijinko17.github.io/hoge/posts/into_blue/</link>
      <pubDate>Thu, 30 Apr 2020 21:30:34 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/into_blue/</guid>
      <description>先日の ABC で念願の青コーダーになりました。
黄パフォで青に入れて気持ちよかったです。
この記事では青になるまでにやってきたことを書いてイキっていこうと思います。
何をした   アルゴリズム、データ構造の勉強をした(去年 8 月〜)
学んだアルゴリズムはだいたいここを見れば分かります。
青になった時点でのライブラリ
アルゴリズム習得の目的は次の 2 つです。
 解ける問題を増やす 知識不足で解けないかもしれない、という不安を払拭する  2 つ目が重要です。問題を解く上で「今の自分の知識では無理かも……」という精神状態になってしまうと解ける問題も解けません。これを回避したければ目にしがちなアルゴリズムは全て習得してしまうべきです。自分はこの考えのもとに緑の頃から遅延セグ木や FFT の勉強をしていました。
たまに twitter で「foo 色に bar アルゴリズムは必要ない！！」と主張してる人を見かけますが、上記の理由からアルゴリズムの学習はどのタイミングでやっても意味があると思っています。
具体的な学習方法についてですが、友人の友人が github で公開している競プロライブラリにあるアルゴリズムをググり、けんちょんさんの記事で勉強することが多かったです。
  ライブラリを整備した(去年 9 月〜)
目的は以下の 2 つです。
 ライブラリをぺたぺた貼って問題を瞬殺できるようにするため。 実装力の低さをカバーするため  これについてあまり語ることはありません。ちなみにライブラリはスニペットですぐ貼れるようにすると楽です。
  実験をするようにした(去年 9 月〜)
きっかけはつよつよの友人が凄まじい diff の問題を実験しまくって解くのを見たことだったと思います。当時水 diff すら怪しかった自分ですが、彼を真似して実験を大切にするようにしたら青 diff も解けるようになりました。
記述が少なくてやる気なさげに見えるかもしれませんが、自分が青になる上で一番効いたのは実験だと思ってます。実験は頭にイイ！！
  山を張った
「自分にはできない」という自信のなさを払拭する一度の成功体験が欲しくて山を張ったことがあります。具体的には以下の 2 回です。
  ABC の E を本番で解くためにグラフの問題に集中して取り組んだ(去年 10 月)</description>
    </item>
    
    <item>
      <title>Macを買った時に設定したこと</title>
      <link>https://mijinko17.github.io/hoge/posts/mynewmac/</link>
      <pubDate>Sat, 29 Feb 2020 05:10:50 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/mynewmac/</guid>
      <description>dotfiles   brew のインスコ-&amp;gt;brew install git-&amp;gt;git clone-&amp;gt;brew bundle の流れ。ちなみに git 自体は元から入っていた。
  brew のインストールにめちゃ時間掛かってびっくりしてしまった。xcode も一緒に入れるらしくそこで時間吸われたっぽい。
  brew bundle も永遠に終わらず、バイトに行く前に回し始めておいたのだが帰ってきたらエラー終了していた。llvm にやたら時間が掛かっていたっぽい。
  neovim 概ね問題なかったが、pip で neovim の何かを入れるのを忘れていて deoplete に怒られてしまった。
mac のシステム環境設定   dock を右寄せ、自動的に非表示。使わないアプリを dock から消して iterm2 を追加。最近使用したアプリを dock に追加しないよう設定。
  finder での並び順を常に種類順に。
  タッチによるクリックを有効化。
  capslock に control を割り当て。
  command+option+J で iterm2 を起動するようにした。Automator を使った。
  ターミナル   iterm2 に hybrid-material のカラースキームを適用。</description>
    </item>
    
    <item>
      <title>Codeforces Round 619</title>
      <link>https://mijinko17.github.io/hoge/posts/codefo_round_619/</link>
      <pubDate>Fri, 14 Feb 2020 01:33:04 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/codefo_round_619/</guid>
      <description>A a[i]、b[i]どちらかがc[i]と等しければ ok。
B k は-1 と隣接するものの内最大のものと最小のものの中間にするのが最適。
C 均等に分割する。
D 行ごとに頑張ると全ての道を通れる。
E 時間のなさ</description>
    </item>
    
    <item>
      <title>ABC154</title>
      <link>https://mijinko17.github.io/hoge/posts/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:39:01 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc154/</guid>
      <description>Summary A はい
B string(s.size(),&#39;x&#39;)
C unordered_map で数え上げ
D 累積和
E 桁 dp。桁 dp の書き方に慣れてなくて苦戦
F 何もできなかった&amp;hellip; 結局答えは$f(r_1-1,k)$とか$f(l,c_1-1)$とかの線形和なのであとは係数を決めればいいがどうやればいいか分からなかった。
#Detail
D 見た瞬間累積和をする(尺取りでもいいが累積和の構造体を持ってるので累積和の方が楽)。小数が現れても高々 0.5 とかなので誤差を気にしなくても大丈夫だろうと考え特別な処理をせずに出すと WA を食らう。原因が分からなかったがとりあえずsetprecisionすると通る。
E $n$以下の自然数の時点で桁 dp 臭。桁に関する条件で凄まじい桁 dp 臭。以前の反省を踏まえ全探索できないか見るが制約的に今回ばかりはできない。桁 dp で確定。しかし書き方になれず大苦戦する。練習します……</description>
    </item>
    
    <item>
      <title>ABC153</title>
      <link>https://mijinko17.github.io/hoge/posts/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:13:03 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc153/</guid>
      <description>ペナ込み 74 分全完でした。 典型の E で時間溶かしたの良くなかった……
問題: atcoder.jp/contests/abc153/tasks
成績: atcoder.jp/users/mijinko/history/share/abc153
Summary A 繰り上げの割り算でスッキリ書きます。
B 必殺技全部使って倒せれば十分。
C 強いモンスターを必殺技で殴って残ったやつを攻撃。
D $f(n):=$(体力$n$のやつを倒すための攻撃数)を dfs
E ダメージ合計を頂点とするグラフを作ってダイクストラで撲殺。そんなことせずともナップザックすればいいっぽいのだが何回でも同じ魔法を使えるところで頭がいかれてしまった。
F 生き残ってる最も左のモンスターを擦るように攻撃するのが最適。使った爆弾がどこまで影響するかをいもす法的に管理して左から見る。
 Details E 考えたのは
 ナップザック グラフを作ってダイクストラ  です。
問題文からしてナップザックを考えるのは当然なのですが、同じ魔法を何度も使える点が The ナップザック的な問題と少し違います。問題が簡単なのは気づきましたがそのせいで焦ってしまい冷静な思考を失ってしまいました。
たまたまこの手の問題をダイクストラで殴り殺した経験があり、その方向で考え直したらうまくいきました。
ダイクストラで解いた人が少ないようなので一応解法を簡単に書くと、ダメージ合計を頂点とするグラフを作り、$i$ から $i+A_j$ にコスト $B_j$ の有向辺を貼ります。このグラフで 0 を始点とするダイクストラをして $h$ までの距離を出力すればいいです。この解法はむしろ同じ魔法を何度も使用できるからこそ使える方法ですね。
提出したコードを貼っておきます。オーバーキル感はありますが、やること自体はシンプルで自分は好きです。
atcoder.jp/contests/abc153/submissions/9756498
あと実験としてここにも貼ります。
Eのソースコード #include &amp;lt;bits/stdc++.h&amp;gt;typedef long long lint; using namespace std; //ただの辺 struct edge { using lint = long long int; int to; lint cost; //引数一つの時は距離1  edge(int t, lint c = 1) : to(t), cost(c) { } }; lint h, n; vector&amp;lt;lint&amp;gt; a, b; // dijkstra // depend:edge vector&amp;lt;long long int&amp;gt; dijkstra(vector&amp;lt;vector&amp;lt;edge&amp;gt;&amp;gt;&amp;amp; g, int start) { using lint = long long int; vector&amp;lt;lint&amp;gt; res(g.</description>
    </item>
    
    <item>
      <title>Codeforces Round #615</title>
      <link>https://mijinko17.github.io/hoge/posts/codefo_round_615/</link>
      <pubDate>Thu, 23 Jan 2020 02:58:44 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/codefo_round_615/</guid>
      <description>A 一旦最大のものに合わせる。残ったコインが 3 の倍数なら YES。
B ソートして前から見る。次の目的地が右上になかったら NO
C 素因数が一つの時は指数が 6 以上で OK。2 つ以上の時は適当に素因数 2 つとって a、b に割り当てて c=n/(a*b)とする。
D x で割った余りで分類して、各余りごとに前から詰めるのが最適。各余りについて作られない最小の数を計算して、それらの最小値を計算すれば良い。セグ木でぶん殴って終わり。
E 各列で考える。各回転数についてどのくらい目的の状態と一致するか分かればいい。各$a_{ij}$について何回転すれば最適な位置に移動できるかはすぐわかることを利用すれば$O(n)$で計算できる。ランタイムエラーで通らなくて切れる。
F 無証明だが多分木の直径の両端とあと一つ最適なやつを取ればいい。三つ目をとるときに LCA でぶん殴る。</description>
    </item>
    
    <item>
      <title>ABC152</title>
      <link>https://mijinko17.github.io/hoge/posts/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 06:55:14 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/abc152/</guid>
      <description>94 分 A~E の 5 完でした。
D に 50 分くらい吸われて死にかけましたが何とか E まで解けました。毎度 C、D あたりで引っかかってる気がします。
問題: https://atcoder.jp/contests/abc152/tasks
成績: https://atcoder.jp/users/mijinko/history/share/abc152
A N==Mかを判定すればいいです。
B  string(n,c)で char c を n 個くっつけたものを生成できるので文字列の生成はすぐです。 string に対して不等号を使えば辞書順の判定はできるのでこれで終わりです。  C  「前にある数が全て自分より大きい」ような数の個数を数えればいいです。 これは「前にある数の最小値が自分より大きい」ような数と言い換えられます。 先頭から順に見ていく場合、前にある数の集合は 1 つずつ増えていきます。これに合わせて min を更新していけばいいです。  D  「n 以下の整数で〜」かつ桁に関する情報と来たら桁 dp。当然ですね。 桁 dp あんま書いたことなくて何も分からない…… 桁 dp でググったりしたけど結局どう dp をするのか分からないまま時間が流れます。 とりあえず問題文を読んで求めたいものを整理します。先頭が i、最後尾が j なる数の総数が分かれば良さそうです。これをcount[i][j]という形で持つことにします。 各(i,j)について高速に count を計算できそうです。i が n の最高位より小さかったら〜、等しい時は j が n の一の位より大きかったら〜…… そんな複雑なコードでバグらないわけがありません(破滅)。この時点で 50 分が経過し 3 完を覚悟します。 ここで 1〜n まで全部見て count を完成させる方法が降って来ます。危なかった。整数 k の最高位と最下位はs=to_string(k)としてs[0]、s.</description>
    </item>
    
    <item>
      <title>Hello, World!</title>
      <link>https://mijinko17.github.io/hoge/posts/first_post/</link>
      <pubDate>Mon, 20 Jan 2020 03:11:20 +0900</pubDate>
      
      <guid>https://mijinko17.github.io/hoge/posts/first_post/</guid>
      <description>このサイトについて   このサイトは mijinko(twitter, atcoder)によって主に競技プログラミング関係の記事を投稿するために作られました。
  コンテスト後によく自分の解法をまとめたツイートをするのですが、この前コンテストに参加できなかった時に他の方の解法ツイートが目障りに感じました(すみませんやたら強い言葉を使ってるのは単純にいい表現が思いつかないだけです……)。コンテスト後の感想戦(?)も競プロの醍醐味ではあるのですが、twitter などの情報の取捨選択をしにくい場所にデカデカと解法を書き連ねるのは少し違うような気がしています。今後は自分の解法はここに投稿するつもりです。
  ページレイアウトは hugo のテンプレートを使って作成し、それを github pages で公開しています。テキストベースのものは極力 github で管理したい思いがあり、それを実現するには github pages が最適だという判断です。ちなみに以前は github pages のリポジトリは公開用とソースコード用で二つ用意したりブランチを不自然に切ったりする必要があったようですが、この記事を書いている現在は以下のように設定することで 1 つのリポジトリで綺麗に完結させることができます。
 github pages の source を master の docs/に指定する。 ./config.toml にpublishDir=&amp;quot;docs&amp;quot;を追加する。これで build 後の生成ファイルが docs/に出力されるようになる。  あと自分がサイトを作る時に悩んだことを書き残しておきます。
 無料アカウントの場合、github pages に使うリポジトリは public である必要があります。 以前は使うリポジトリの名前が固定されていたようですが、現在はどのリポジトリでも pages を使うことができます。    markdown の書き方が分からなすぎて辛いです。今日は結局リンクを別のタブで開くようにできませんでした。あと tex の表示もできるようにしたいですね。
  このページテーマは Hermit という名前で、スタイリッシュで気に入っているのですが、ページの遷移が悪い感があります。一つの記事から他のページへの移動がとても面倒です(一度記事一覧に戻る必要があります)。テーマは気軽に変えられそうなのでもう少し使い勝手のいいものを探していきます。
  </description>
    </item>
    
  </channel>
</rss>